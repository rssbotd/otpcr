#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C0413,W0401,W0614,W0622


"tinder"


import os
import profile
import shutil
import sys
import termios
import time
import _thread


sys.path.insert(0, os.getcwd())


from otpcr.face    import *
from otpcr.modules import face


Cfg         = Config("objbot")
Cfg.mod     = ",".join(modnames(face))
Cfg.debug   = True
Cfg.name    = "tinder"
Cfg.silent  = False
Cfg.skip    = ["debug",]


face.rss.DEBUG = True


LAP = 1
NRS = 1
NRCOMMAND = 1
PERCALL   = 1
STARTTIME = time.time()


events = []
paylock = _thread.allocate_lock()


param = Object()
param.cmd = [""]
param.dpl = ["hnrss title,url"]
param.fnd = ["log", "todo", "rss", "config"]
param.imp = ["tests/feeds.opml"]
param.log = ["bla"]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews"]
param.pwd = ["bla mekker"]
param.rem = ["hnrss"]
param.req = [""]
param.res = [""]
param.rss = ["http://hnrss.org/newest",]
param.tdo = ["mekker"]
param.ver = [""]


class CLI(Client):

    "command line interface."

    def __init__(self):
        Client.__init__(self)
        Broker.register(self)
        self.register("command", command)

    def raw(self, txt):
        if "v" in Cfg.opts:
            print(txt)


def consume(evts):
    "wait for events."
    res = []
    for evt in evts:
        evt.wait()
        res.append(evt)
    return res


def payload(clt):
    "do payload."
    cmdz = Commands.cmds
    with paylock:
        nmr = 0
        for cmdd in cmdz:
            for ex in getattr(param, cmdd, [""]):
                evt = Event()
                evt.channel = "#objbot"
                evt.orig = repr(clt)
                evt.txt = cmdd + " " + ex
                evt.type = "command"
                clt.put(evt)
                events.append(evt)
                nmr += 1
        return nmr


def wrapped(function):
    "reset terminal."
    old2 = None
    try:
        old2 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        function()
    except (KeyboardInterrupt, EOFError):
        print("")
    finally:
        if old2:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old2)


def mainer():
    "main"
    Cfg.mod = ",".join(modnames(face))
    clt = CLI()
    clt.start()
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clt))
    for thr in thrs:
        thr.join()
    consume(events)


if __name__ == "__main__":
    Workdir.wdr = ".test"
    parse(Cfg, " ".join(sys.argv[1:]))
    if "v" in Cfg.opts:
        enable(print)
    if "f" in Cfg.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    skel()
    nrs = Cfg.index or 1
    NRCOMMAND = len(Commands.cmds) or 1
    if "p" in Cfg.opts:
        profile.runctx(mainer.__code__, globals(), locals())
    else:
        wrapped(mainer)
    errors(print)
    if "v" in Cfg.opts:
        endtime = time.time()
        lap = laps(endtime-STARTTIME)
        percall = (endtime-STARTTIME)/(nrs*NRCOMMAND)
        print(f"{lap} {nrs} {NRCOMMAND} {percall}")
    sys.exit()
